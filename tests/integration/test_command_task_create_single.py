from dataclasses import dataclass
from pathlib import Path
from typing import List

import pytest
from click.testing import CliRunner

from tests.integration.constants import TEMPORARY_DIRECTORY
from tidecli.main import task


@dataclass
class ExpectedTaskFile:
    filename: str
    content: str | None = None  # None is used to ignore the content during tests


task_exercises_params = [
    ("exercise-1", "users/test-user-1/course-1/exercise-1", ["t1", "t2", "t3"]),
    ("exercise-2", "users/test-user-1/course-1/exercise-2", ["33232123"]),
    ("exercise-a", "users/test-user-1/course-2/exercise-a", ["t1", "t2", "t4"]),
    ("exercise-b", "users/test-user-1/course-2/exercise-b", ["t1"]),
]

# TODO: content attributes may have to be match actual content
# TODO: refactor params structure, to be tested per file
task_content_params = [
    # task with no supplementary files
    (
        "users/test-user-1/course-2",
        "exercise-a",
        "t2",
        [
            ExpectedTaskFile(
                filename="hello.py",
                content='print("marsu maiskuttaa")',
            ),
            ExpectedTaskFile(filename=".timdata"),
        ],
    ),
    # task with supplementary files defined in markdown
    (
        "users/test-user-1/course-1",
        "exercise-1",
        "t2",
        [
            ExpectedTaskFile(
                filename="animals.py"
                # TODO: how to handle file content with BYCODE tags
            ),
            ExpectedTaskFile(
                filename="kissa.txt",
                content="istuu\nja\nnaukuu\n",
            ),
            ExpectedTaskFile(filename="koira.dat", content="seisoo ja haukkuu"),
            ExpectedTaskFile(filename=".timdata"),
        ],
    ),
    # task with supplementary files autogenerated by TIM
    (
        "users/test-user-1/course-1",
        "exercise-1",
        "t3",
        [
            ExpectedTaskFile(filename="hello.cs"),
            ExpectedTaskFile(filename="t3.csproj"),
            ExpectedTaskFile(filename=".timdata"),
        ],
    ),
    # task with supplementary files from external source
    (
        "users/test-user-1/course-2",
        "exercise-b",
        "t1",
        [
            ExpectedTaskFile(filename="hevonen.py",
                             content='print("hevonen juo limsaa")\n'),
            ExpectedTaskFile(filename="logo.svg"),
            ExpectedTaskFile(filename=".timdata"),
        ],
    ),
    # TODO: task with supplementary files from TIM source
]


# TASK CREATE
# TODO: helpperit omaan luokkaansa, esim. tiedostojen lukeminen tai luominen ym.

@pytest.mark.parametrize("course_path, exercise_id, task_id, expected_files", task_content_params)
def test_create_single_task_creates_files_with_expected_content(
    course_path: str,
    exercise_id: str,
    task_id: str,
    expected_files: List[ExpectedTaskFile],
    tmp_dir,
):
    """Check that creating a single task creates the expected task files with expected content in the expected location"""
    runner = CliRunner()

    runner.invoke(
        task,
        [
            "create",
            str(Path(course_path, exercise_id)),
            task_id,
            "-d",
            TEMPORARY_DIRECTORY,
        ],
    )

    for expected_file in expected_files:
        task_file_path = Path(
            TEMPORARY_DIRECTORY, exercise_id, task_id, expected_file.filename
        )

        try:
            file = open(task_file_path)
        except FileNotFoundError:
            pytest.fail(
                f'Expected file "{
                    expected_file.filename}" not found in temporary directory.'
            )
        else:
            if expected_file.content is not None:
                with file:
                    content = file.read()
                    assert content == expected_file.content


def test_create_task_single_creates_timdata_file(tmp_dir):
    exercise_id = "exercise-a"
    task_id = "t2"
    timdata_file_name = ".timdata"
    timdata_file_path = Path(TEMPORARY_DIRECTORY, exercise_id, task_id, timdata_file_name)
    runner = CliRunner()

    runner.invoke(
        task,
        [
            "create",
            str(Path("users/test-user-1/course-2", exercise_id)),
            task_id,
            "-d",
            TEMPORARY_DIRECTORY,
        ],
    )

    assert timdata_file_path.is_file()



